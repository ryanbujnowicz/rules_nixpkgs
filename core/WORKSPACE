# NOTE: temporary boilerplate for compatibility with `WORKSPACE` setup!
# TODO: remove when migration to `bzlmod` is complete

### generic dependencies for rendering documentation

local_repository(
    name = "io_tweag_rules_nixpkgs",
    path = "..",
)

load("@io_tweag_rules_nixpkgs//nixpkgs:repositories.bzl", "rules_nixpkgs_dependencies")

rules_nixpkgs_dependencies(toolchains = ['cc', 'java', 'posix'])

load("@rules_nixpkgs_core//docs:dependencies_1.bzl", "docs_dependencies_1")

docs_dependencies_1()

load("@rules_nixpkgs_core//docs:dependencies_2.bzl", "docs_dependencies_2")

docs_dependencies_2()

### end generic dependencies for rendering documentation

### dependencies for tests

load(
    "//:nixpkgs.bzl",
    "nixpkgs_git_repository",
    "nixpkgs_local_repository",
    "nixpkgs_package",
)
load("@bazel_skylib//:workspace.bzl", "bazel_skylib_workspace")

bazel_skylib_workspace()

nixpkgs_git_repository(
    name = "remote_nixpkgs",
    remote = "https://github.com/NixOS/nixpkgs",
    revision = "22.05",
    sha256 = "0f8c25433a6611fa5664797cd049c80faefec91575718794c701f3b033f2db01",
)

# same as @nixpkgs but using the `nix_file_content` parameter
nixpkgs_local_repository(
    name = "nixpkgs_content",
    nix_file_content = "import ./nixpkgs.nix",
    nix_file_deps = [
        "//:nixpkgs.nix",
        "//:nixpkgs.json",
    ],
)

nixpkgs_package(
    name = "nixpkgs-git-repository-test",
    attribute_path = "hello",
    repositories = {"nixpkgs": "@remote_nixpkgs"},
)

nixpkgs_package(
    name = "nixpkgs-local-repository-test",
    nix_file_content = "with import <nixpkgs> {}; hello",
    repositories = {"nixpkgs": "@nixpkgs_content"},
)

nixpkgs_package(
    name = "hello",
    # Deliberately not repository, to test whether repositories works.
    repositories = {"nixpkgs": "@nixpkgs"},
)

nixpkgs_package(
    name = "expr-test",
    nix_file_content = "let pkgs = import <nixpkgs> { config = {}; overlays = []; }; in pkgs.hello",
    nix_file_deps = ["//:nixpkgs.json"],
    # Deliberately not @nixpkgs, to test whether explict file works.
    repositories = {"nixpkgs": "//:nixpkgs.nix"},
)

nixpkgs_package(
    name = "attribute-test",
    attribute_path = "hello",
    repository = "@nixpkgs",
)

nixpkgs_package(
    name = "expr-attribute-test",
    attribute_path = "hello",
    nix_file_content = "import <nixpkgs> { config = {}; overlays = []; }",
    repository = "@nixpkgs",
)

nixpkgs_package(
    name = "nix-file-test",
    attribute_path = "hello",
    nix_file = "//tests:nixpkgs.nix",
    repository = "@nixpkgs",
)

nixpkgs_package(
    name = "nix-file-deps-test",
    nix_file = "//tests:hello.nix",
    nix_file_deps = ["//tests:pkgname.nix"],
    repository = "@nixpkgs",
)

nixpkgs_package(
    name = "output-filegroup-test",
    nix_file = "//tests:output.nix",
    repository = "@nixpkgs",
)

nixpkgs_package(
    name = "extra-args-test",
    nix_file_content = """
{ packagePath }: (import <nixpkgs> { config = {}; overlays = []; }).${packagePath}
    """,
    nixopts = [
        "--argstr",
        "packagePath",
        "hello",
    ],
    repository = "@nixpkgs",
)

nixpkgs_package(
    name = "output-filegroup-manual-test",
    build_file_content = """
package(default_visibility = [ "//visibility:public" ])
filegroup(
    name = "manual-filegroup",
    srcs = glob(["hi-i-exist", "hi-i-exist-too", "bin/*"]),
)
""",
    nix_file = "//tests:output.nix",
    repository = "@nixpkgs",
)

nixpkgs_package(
    name = "relative-imports",
    attribute_path = "hello",
    nix_file = "//tests:relative_imports.nix",
    nix_file_deps = [
        "//:nixpkgs.json",
        "//:nixpkgs.nix",
        "//tests:relative_imports/nixpkgs.nix",
    ],
    repository = "@nixpkgs",
)

# This bazel build @output-derivation-is-a-file//... must fail
# See https://github.com/tweag/rules_nixpkgs/issues/99 for details
nixpkgs_package(
    name = "output-derivation-is-a-file",
    attribute_path = "",
    nix_file_content = """let pkgs = import <nixpkgs> { config = {}; overlays = []; }; in pkgs.writeText "foo" "bar" """,
    nix_file_deps = [
        "//:nixpkgs.json",
        "//:nixpkgs.nix",
        "//tests:relative_imports/nixpkgs.nix",
    ],
    repository = "@nixpkgs",
)

local_repository(
    name = "nixpkgs_location_expansion_test_file",
    path = "tests/location_expansion/test_repo",
)

nixpkgs_package(
    name = "nixpkgs_location_expansion_test",
    build_file_content = "exports_files(glob(['out/**']))",
    nix_file = "//tests:location_expansion.nix",
    nix_file_deps = [
        "//tests:location_expansion/test_file",
        "@nixpkgs_location_expansion_test_file//:test_file",
    ],
    nixopts = [
        "--arg",
        "local_file",
        "$(location //tests:location_expansion/test_file)",
        "--arg",
        "external_file",
        "$(location @nixpkgs_location_expansion_test_file//:test_file)",
    ],
    repository = "@remote_nixpkgs",
)

### end dependencies for tests
